name: CI/CD Secure TODO App

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  IMAGE_NAME: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/todo-app

jobs:
  build-scan-push-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write       # Required for keyless Cosign signing
      packages: write

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Define image tags
      - name: Set Docker image tags
        id: image_tags
        run: |
          SHA_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          DATE_TAG=$(date +'%Y%m%d%H%M')
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      # 5. Build Docker image locally (load to Docker daemon)
      - name: Build Docker image locally
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true    # Make image available locally for Trivy scan
          tags: ${{ env.IMAGE_NAME }}:${{ steps.image_tags.outputs.sha_tag }}

      # 6. Scan Docker image locally with Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.image_tags.outputs.sha_tag }}
          format: table
          vuln-type: os,library
          ignore-unfixed: true
          exit-code: '1'   # Fail workflow if critical vulnerabilities exist

      # 7. Push Docker images to Docker Hub (if scan passes)
      - name: Push Docker images
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.image_tags.outputs.sha_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.image_tags.outputs.date_tag }}
            ${{ env.IMAGE_NAME }}:latest

      # 8. Install Cosign for signing
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # 9. Sign Docker images (keyless, GitHub OIDC)
      - name: Sign Docker images
        run: |
          for TAG in ${{ steps.image_tags.outputs.sha_tag }} ${{ steps.image_tags.outputs.date_tag }} latest; do
            cosign sign ${{ env.IMAGE_NAME }}:$TAG --yes
          done

      # 10. Verify Docker image signatures
      - name: Verify Docker image signatures
        run: |
          for TAG in ${{ steps.image_tags.outputs.sha_tag }} ${{ steps.image_tags.outputs.date_tag }} latest; do
            cosign verify ${{ env.IMAGE_NAME }}:$TAG \
              --certificate-identity-regexp ".*" \
              --certificate-oidc-issuer-regexp "https://token.actions.githubusercontent.com"
          done

